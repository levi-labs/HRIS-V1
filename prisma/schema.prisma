// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(60)
  User User[]

  @@map("roles")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique @db.VarChar(40)
  email     String     @unique @db.VarChar(60)
  password  String     @db.VarChar(255)
  roleId    Int        @db.Int
  role      Role       @relation(fields: [roleId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Employee  Employee[]

  @@map("users")
}

model Department {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(80)
  phone       String        @db.VarChar(25)
  address     String        @db.VarChar(150)
  JobPosition JobPosition[]

  @@map("departments")
}

model JobPosition {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(80)
  level         String      @db.VarChar(20)
  salary_min    Decimal     @db.Decimal(18, 2)
  salary_max    Decimal     @db.Decimal(18, 2)
  department_id Int?        @db.Int
  department    Department? @relation(fields: [department_id], references: [id])
  Employee      Employee[]

  @@map("job_positions")
}

model Employee {
  id              Int         @id @default(autoincrement())
  first_name      String      @db.VarChar(60)
  last_name       String      @db.VarChar(60)
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  job_position_id Int
  job_position    JobPosition @relation(fields: [job_position_id], references: [id])

  @@map("employees")
}
